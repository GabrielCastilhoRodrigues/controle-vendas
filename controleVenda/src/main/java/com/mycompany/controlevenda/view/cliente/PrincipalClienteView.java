package com.mycompany.controlevenda.view.cliente;

import com.mycompany.controlevenda.constants.ModelConstants;
import com.mycompany.controlevenda.constants.TitulosConstants;
import com.mycompany.controlevenda.constants.ValidacoesConstants;
import com.mycompany.controlevenda.constants.model.ClienteConstants;
import com.mycompany.controlevenda.control.ClienteController;
import com.mycompany.controlevenda.model.Cliente;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.text.SimpleDateFormat;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableRowSorter;

/**
 * Listagem de Clientes cadastrados.
 *
 * @author gabri
 */
public class PrincipalClienteView extends JFrame {

    /**
     * Controller do Cliente.
     */
    private final ClienteController clienteController = new ClienteController();

    /**
     * Inicia os componentes da tela.
     */
    private void init() {
        tableCliente.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        DefaultTableModel tableModelCliente
                = (DefaultTableModel) tableCliente.getModel();

        //Cria uma ordenação para o JTable
        tableCliente.setRowSorter(new TableRowSorter(tableModelCliente));

        //Define o tamanho das colunas do JTable.
        TableColumnModel tableColumnModelCliente
                = tableCliente.getColumnModel();

        tableColumnModelCliente.getColumn(0).setPreferredWidth(100);
        tableColumnModelCliente.getColumn(1).setPreferredWidth(400);
        tableColumnModelCliente.getColumn(2).setPreferredWidth(140);
        tableColumnModelCliente.getColumn(3).setPreferredWidth(140);

        //Define que os registros irão aparecer centralizados.
        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer();
        cellRenderer.setHorizontalAlignment(SwingConstants.CENTER);

        for (int i = 0; i < tableColumnModelCliente.getColumnCount(); i++) {
            tableColumnModelCliente.getColumn(i).setCellRenderer(cellRenderer);
        }

        btnCriar.setText(TitulosConstants.CRIAR);
        btnEditar.setText(TitulosConstants.EDITAR);
        btnDeletar.setText(TitulosConstants.DELETAR);
        setTitle(ClienteConstants.CLIENTE);

        btnCriar.addActionListener(btn -> criarCliente());
        btnEditar.addActionListener(btn -> editarCliente());
        btnDeletar.addActionListener(btn -> deletarCliente());

        preencheTableCliente();
    }

    /**
     * Preenche a tabela presente em tela.
     */
    private void preencheTableCliente() {
        DefaultTableModel tableModelCliente
                = (DefaultTableModel) tableCliente.getModel();
        tableModelCliente.setNumRows(0);
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

        for (Cliente cliente : clienteController.listaClientes()) {
            tableModelCliente.addRow(new Object[]{
                cliente.getCodigo(),
                cliente.getNome(),
                cliente.getValorLimiteCompra(),
                dateFormat.format(cliente.getDataFechamentoFatura())
            });
        }
    }

    /**
     * Creates new form ClienteView
     */
    public PrincipalClienteView() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelCliente = new javax.swing.JPanel();
        panelOpcoes = new javax.swing.JPanel();
        btnCriar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnDeletar = new javax.swing.JButton();
        scrollPaneCliente = new javax.swing.JScrollPane();
        tableCliente = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 250));

        panelCliente.setLayout(new java.awt.BorderLayout());
        getContentPane().add(panelCliente, java.awt.BorderLayout.CENTER);

        btnCriar.setText("btnCriar");
        panelOpcoes.add(btnCriar);

        btnEditar.setText("btnEditar");
        panelOpcoes.add(btnEditar);

        btnDeletar.setText("btnDeletar");
        panelOpcoes.add(btnDeletar);

        getContentPane().add(panelOpcoes, java.awt.BorderLayout.PAGE_END);

        tableCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome", "Limite de Compra", "Fechamento Fatura"
            }
        ));
        scrollPaneCliente.setViewportView(tableCliente);

        getContentPane().add(scrollPaneCliente, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Chama a tela de cadastro de Cliente.
     */
    private void criarCliente() {
        ClienteView clienteView = new ClienteView();
        clienteView.addWindowListener(new WindowAdapter() {
            public void windowClosed(WindowEvent windowEvent) {
                if (clienteView.isRealizouCadastro()) {
                    preencheTableCliente();
                }
            }
        });

        clienteView.setVisible(true);
    }

    /**
     * Chama a tela de edição de cliente.
     */
    private void editarCliente() {
        if (tableCliente.getSelectedRow() != -1) {
            int linhaSelecionada = tableCliente.getSelectedRow();
            Cliente cliente = clienteController.retornaClientePeloCodigo(
                    Long.valueOf(tableCliente.getValueAt(linhaSelecionada, 0)
                            .toString()));

            if (cliente != null) {
                ClienteView clienteView = new ClienteView(cliente);
                clienteView.addWindowListener(new WindowAdapter() {
                    public void windowClosed(WindowEvent windowEvent) {
                        if (clienteView.isRealizouCadastro()) {
                            preencheTableCliente();
                        }
                    }
                });

                clienteView.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this,
                        ValidacoesConstants.REGISTRO_NAO_ENCONTRADO);
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    ValidacoesConstants.SELECIONE_AO_MENOS_UM_REGISTRO);
        }
    }

    /**
     * Deleta o cliente selecionado.
     */
    private void deletarCliente() {
        if (tableCliente.getSelectedRow() != -1) {
            int linhaSelecionada = tableCliente.getSelectedRow();
            Long codigo = Long.valueOf(
                    tableCliente.getValueAt(linhaSelecionada, 0).toString());

            if (clienteController.deleteCliente(codigo)) {
                JOptionPane.showMessageDialog(this,
                        ModelConstants.REMOVIDO_COM_SUCESSO);
                preencheTableCliente();
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    ValidacoesConstants.SELECIONE_AO_MENOS_UM_REGISTRO);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCriar;
    private javax.swing.JButton btnDeletar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JPanel panelCliente;
    private javax.swing.JPanel panelOpcoes;
    private javax.swing.JScrollPane scrollPaneCliente;
    private javax.swing.JTable tableCliente;
    // End of variables declaration//GEN-END:variables
}
