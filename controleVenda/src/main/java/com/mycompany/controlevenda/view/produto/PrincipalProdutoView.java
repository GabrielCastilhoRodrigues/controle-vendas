package com.mycompany.controlevenda.view.produto;

import com.mycompany.controlevenda.constants.ModelConstants;
import com.mycompany.controlevenda.constants.TitulosConstants;
import com.mycompany.controlevenda.constants.ValidacoesConstants;
import com.mycompany.controlevenda.constants.model.ProdutoConstants;
import com.mycompany.controlevenda.control.ProdutoController;
import com.mycompany.controlevenda.model.Produto;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableRowSorter;

/**
 * Listagem de Produtos cadastrados.
 *
 * @author gabri
 */
public class PrincipalProdutoView extends JFrame {

    /**
     * Controller do Produto.
     */
    private final ProdutoController produtoController = new ProdutoController();

    /**
     * Inicia os componentes da tela.
     */
    private void init() {
        tableEntidade.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        DefaultTableModel tableModelProduto
                = (DefaultTableModel) tableEntidade.getModel();

        //Cria uma ordenação para o JTable
        tableEntidade.setRowSorter(new TableRowSorter(tableModelProduto));

        //Define o tamanho das colunas do JTable.
        TableColumnModel tableColumnModelProduto
                = tableEntidade.getColumnModel();

        tableColumnModelProduto.getColumn(0).setPreferredWidth(80);
        tableColumnModelProduto.getColumn(1).setPreferredWidth(270);
        tableColumnModelProduto.getColumn(2).setPreferredWidth(100);

        //Define que os registros irão aparecer centralizados.
        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer();
        cellRenderer.setHorizontalAlignment(SwingConstants.CENTER);

        for (int i = 0; i < tableColumnModelProduto.getColumnCount(); i++) {
            tableColumnModelProduto.getColumn(i).setCellRenderer(cellRenderer);
        }

        btnCriar.setText(TitulosConstants.CRIAR);
        btnEditar.setText(TitulosConstants.EDITAR);
        btnDeletar.setText(TitulosConstants.DELETAR);
        setTitle(ProdutoConstants.PRODUTO);

        btnCriar.addActionListener(btn -> criar());
        btnEditar.addActionListener(btn -> editar());
        btnDeletar.addActionListener(btn -> deletar());

        preencheTable();
    }

    /**
     * Preenche a tabela presente em tela.
     */
    private void preencheTable() {
        DefaultTableModel tableModelProduto
                = (DefaultTableModel) tableEntidade.getModel();
        tableModelProduto.setNumRows(0);

        for (Produto produto : produtoController.listaTodos()) {
            tableModelProduto.addRow(new Object[]{
                produto.getCodigo(),
                produto.getDescricao(),
                String.valueOf(produto.getPreco()).replace(".", ",")
            });
        }
    }

    /**
     * Creates new form ProdutoView
     */
    public PrincipalProdutoView() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelEntidade = new javax.swing.JPanel();
        panelOpcoes = new javax.swing.JPanel();
        btnCriar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnDeletar = new javax.swing.JButton();
        scrollPaneEntidade = new javax.swing.JScrollPane();
        tableEntidade = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        panelEntidade.setLayout(new java.awt.BorderLayout());
        getContentPane().add(panelEntidade, java.awt.BorderLayout.CENTER);

        btnCriar.setText("btnCriar");
        panelOpcoes.add(btnCriar);

        btnEditar.setText("btnEditar");
        panelOpcoes.add(btnEditar);

        btnDeletar.setText("btnDeletar");
        panelOpcoes.add(btnDeletar);

        getContentPane().add(panelOpcoes, java.awt.BorderLayout.PAGE_END);

        tableEntidade.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Descrição", "Preço"
            }
        ));
        scrollPaneEntidade.setViewportView(tableEntidade);

        getContentPane().add(scrollPaneEntidade, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Chama a tela de cadastro de Produto.
     */
    private void criar() {
        ProdutoView produtoView = new ProdutoView();
        produtoView.addWindowListener(new WindowAdapter() {
            public void windowClosed(WindowEvent windowEvent) {
                if (produtoView.isRealizouCadastro()) {
                    preencheTable();
                }
            }
        });

        produtoView.setVisible(true);
    }

    /**
     * Chama a tela de edição de Produto.
     */
    private void editar() {
        if (tableEntidade.getSelectedRow() != -1) {
            int linhaSelecionada = tableEntidade.getSelectedRow();
            Produto produto = produtoController.retornaEntidadePeloCodigo(
                    Long.valueOf(tableEntidade.getValueAt(linhaSelecionada, 0)
                            .toString()));

            if (produto != null) {
                ProdutoView produtoView = new ProdutoView(produto);
                produtoView.addWindowListener(new WindowAdapter() {
                    public void windowClosed(WindowEvent windowEvent) {
                        if (produtoView.isRealizouCadastro()) {
                            preencheTable();
                        }
                    }
                });

                produtoView.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this,
                        ValidacoesConstants.REGISTRO_NAO_ENCONTRADO);
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    ValidacoesConstants.SELECIONE_AO_MENOS_UM_REGISTRO);
        }
    }

    /**
     * Deleta o Produto selecionado.
     */
    private void deletar() {
        if (tableEntidade.getSelectedRow() != -1) {
            int linhaSelecionada = tableEntidade.getSelectedRow();
            Long codigo = Long.valueOf(
                    tableEntidade.getValueAt(linhaSelecionada, 0).toString());

            if (produtoController.deletarEntidade(codigo)) {
                JOptionPane.showMessageDialog(this,
                        ModelConstants.REMOVIDO_COM_SUCESSO);
                preencheTable();
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    ValidacoesConstants.SELECIONE_AO_MENOS_UM_REGISTRO);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCriar;
    private javax.swing.JButton btnDeletar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JPanel panelEntidade;
    private javax.swing.JPanel panelOpcoes;
    private javax.swing.JScrollPane scrollPaneEntidade;
    private javax.swing.JTable tableEntidade;
    // End of variables declaration//GEN-END:variables
}
