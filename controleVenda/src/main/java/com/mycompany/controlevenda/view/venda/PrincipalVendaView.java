package com.mycompany.controlevenda.view.venda;

import com.mycompany.controlevenda.constants.ModelConstants;
import com.mycompany.controlevenda.constants.TitulosConstants;
import com.mycompany.controlevenda.constants.ValidacoesConstants;
import com.mycompany.controlevenda.constants.model.VendaConstants;
import com.mycompany.controlevenda.control.ItemVendaController;
import com.mycompany.controlevenda.control.VendaController;
import com.mycompany.controlevenda.model.ItemVenda;
import com.mycompany.controlevenda.model.Venda;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 * Listagem das Venda cadastradas.
 *
 * @author gabri
 */
public class PrincipalVendaView extends JFrame {

    /**
     * Controller do Venda.
     */
    private final VendaController vendaController = new VendaController();

    /**
     * Inicia os componentes da tela.
     */
    private void init() {
        tableEntidade.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

        DefaultTableModel tableModelVenda = new DefaultTableModel() {

            /**
             * {@inheritDoc}
             */
            @Override
            public boolean isCellEditable(final int row, final int column) {
                return false;
            }
        };

        tableModelVenda.addColumn("Código");
        tableModelVenda.addColumn("Cliente");
        tableModelVenda.addColumn("Valor Total");
        tableModelVenda.addColumn("Data Venda");

        tableEntidade.setModel(tableModelVenda);

        //Define o tamanho das colunas do JTable.
        TableColumnModel tableColumnModelVenda
                = tableEntidade.getColumnModel();

        tableColumnModelVenda.getColumn(0).setPreferredWidth(60);
        tableColumnModelVenda.getColumn(1).setPreferredWidth(210);
        tableColumnModelVenda.getColumn(2).setPreferredWidth(80);
        tableColumnModelVenda.getColumn(3).setPreferredWidth(100);

        //Define que os registros irão aparecer centralizados.
        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer();
        cellRenderer.setHorizontalAlignment(SwingConstants.CENTER);

        for (int i = 0; i < tableColumnModelVenda.getColumnCount(); i++) {
            tableColumnModelVenda.getColumn(i).setCellRenderer(cellRenderer);
        }

        btnCriar.setText(TitulosConstants.CRIAR);
        btnEditar.setText(TitulosConstants.EDITAR);
        btnDeletar.setText(TitulosConstants.DELETAR);
        setTitle(VendaConstants.VENDA);

        btnCriar.addActionListener(btn -> criar());
        btnEditar.addActionListener(btn -> editar());
        btnDeletar.addActionListener(btn -> deletar());

        preencheTable();
    }

    /**
     * Preenche a tabela presente em tela.
     */
    private void preencheTable() {
        DefaultTableModel tableModelVenda
                = (DefaultTableModel) tableEntidade.getModel();
        tableModelVenda.setNumRows(0);
        DateTimeFormatter dateTimeFormatter
                        = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        for (Venda venda : vendaController.listaTodos()) {
            tableModelVenda.addRow(new Object[]{
                venda.getCodigo(),
                venda.getCliente().getNome(),
                String.valueOf(venda.getValorTotal()).replace(".", ","),
                dateTimeFormatter.format(venda.getDataVenda()),
            });
        }
    }

    /**
     * Creates new form VendaView
     */
    public PrincipalVendaView() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelEntidade = new javax.swing.JPanel();
        panelOpcoes = new javax.swing.JPanel();
        btnCriar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnDeletar = new javax.swing.JButton();
        scrollPaneEntidade = new javax.swing.JScrollPane();
        tableEntidade = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        panelEntidade.setLayout(new java.awt.BorderLayout());
        getContentPane().add(panelEntidade, java.awt.BorderLayout.CENTER);

        btnCriar.setText("btnCriar");
        panelOpcoes.add(btnCriar);

        btnEditar.setText("btnEditar");
        panelOpcoes.add(btnEditar);

        btnDeletar.setText("btnDeletar");
        panelOpcoes.add(btnDeletar);

        getContentPane().add(panelOpcoes, java.awt.BorderLayout.PAGE_END);

        tableEntidade.setAutoCreateRowSorter(true);
        tableEntidade.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Cliente", "Valor Total", "Data Venda"
            }
        ));
        scrollPaneEntidade.setViewportView(tableEntidade);

        getContentPane().add(scrollPaneEntidade, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Chama a tela de cadastro da Venda.
     */
    private void criar() {
        VendaView vendaView = new VendaView();
        vendaView.addWindowListener(new WindowAdapter() {
            public void windowClosed(WindowEvent windowEvent) {
                if (vendaView.isRealizouCadastro()) {
                    preencheTable();
                }
            }
        });

        vendaView.setVisible(true);
    }

    /**
     * Chama a tela de edição da Venda.
     */
    private void editar() {
        if (tableEntidade.getSelectedRow() != -1) {
            int linhaSelecionada = tableEntidade.getSelectedRow();
            Venda venda = vendaController.retornaEntidadePeloCodigo(
                    Long.valueOf(tableEntidade.getValueAt(linhaSelecionada, 0)
                            .toString()));

            if (venda != null) {
                ItemVendaController itemVendaController
                        = new ItemVendaController();
                List<ItemVenda> itens = itemVendaController
                        .retornaEntidadePeloCodigoVenda(venda.getCodigo());

                if (!itens.isEmpty()) {
                    venda.setItensVenda(itens);
                }

                VendaView vendaView = new VendaView(venda);
                vendaView.addWindowListener(new WindowAdapter() {
                    public void windowClosed(WindowEvent windowEvent) {
                        if (vendaView.isRealizouCadastro()) {
                            preencheTable();
                        }
                    }
                });

                vendaView.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this,
                        ValidacoesConstants.REGISTRO_NAO_ENCONTRADO);
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    ValidacoesConstants.SELECIONE_AO_MENOS_UM_REGISTRO);
        }
    }

    /**
     * Deleta a Venda selecionada.
     */
    private void deletar() {
        if (tableEntidade.getSelectedRow() != -1) {
            int linhaSelecionada = tableEntidade.getSelectedRow();
            Long codigo = Long.valueOf(
                    tableEntidade.getValueAt(linhaSelecionada, 0).toString());

            if (vendaController.deletarEntidade(codigo)) {
                JOptionPane.showMessageDialog(this,
                        ModelConstants.REMOVIDO_COM_SUCESSO);
                preencheTable();
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    ValidacoesConstants.SELECIONE_AO_MENOS_UM_REGISTRO);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCriar;
    private javax.swing.JButton btnDeletar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JPanel panelEntidade;
    private javax.swing.JPanel panelOpcoes;
    private javax.swing.JScrollPane scrollPaneEntidade;
    private javax.swing.JTable tableEntidade;
    // End of variables declaration//GEN-END:variables
}
